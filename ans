#!/bin/sh

#  AUTONOMOUS NODE SYSTEM
#  Copyright Â© 2019 cryon.io
#
#  This program is free software: you can redistribute it and/or modify
#  it under the terms of the GNU Affero General Public License as published
#  by the Free Software Foundation, either version 3 of the License, or
#  (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU Affero General Public License for more details.
#
#  You should have received a copy of the GNU Affero General Public License
#  along with this program.  If not, see <https://www.gnu.org/licenses/>.
#
#  Contact: cryi@tutanota.com

PATH_TO_ANS=$(readlink -f "$0")
BASEDIR=$(dirname "$PATH_TO_ANS")
PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin

# shellcheck disable=SC1090
. "$BASEDIR/_ans_methods/conf.sh"
# shellcheck disable=SC1090
. "$BASEDIR/_ans_methods/docker.sh"
# shellcheck disable=SC1090
. "$BASEDIR/_ans_methods/help.sh"
# shellcheck disable=SC1090
. "$BASEDIR/_ans_methods/prints.sh"
# shellcheck disable=SC1090
. "$BASEDIR/_ans_methods/user.sh"
# shellcheck disable=SC1090
. "$BASEDIR/_ans_methods/util.sh"
# shellcheck disable=SC1090
. "$BASEDIR/_ans_methods/dist_info.sh"
# shellcheck disable=SC1090
. "$BASEDIR/_ans_methods/privileges.sh"
# shellcheck disable=SC1090
. "$BASEDIR/_ans_methods/dependencies.sh"
# shellcheck disable=SC1090
. "$BASEDIR/_ans_methods/json.sh"
# shellcheck disable=SC1090
. "$BASEDIR/_ans_methods/update.sh"
# shellcheck disable=SC1090
. "$BASEDIR/_ans_methods/git.sh"

require_ans_version() {
    NEEDED_VER=$1
    ANS_VERSION=$(get_json_file_value "$BASEDIR/version.json" "ans")
    if [ "$(echo "$NEEDED_VER"' > '"$ANS_VERSION" | bc -l)" = "1" ]; then
        error "Node $NODE requires version $NEEDED_VER of ans. Please update your ans."
        info "HINT: ./ans --update-ans"
        exit 3
    fi
}

parse_params() {
    for arg in "$@"; do
        case $arg in
        -h | --help)
            script_usage
            exit 0
            ;;
        -f | --full)
            full=true
            noCache="--no-cache"
            forceRecreate="--force-recreate"
            ;;
        -sd | --setup-dependencies)
            dependencies=true
            ;;
        -n=* | --node=*)
            NODE=$(echo "$arg" | sed 's/-n=//g')
            NODE=$(echo "$NODE" | sed 's/--node=//g')
            ;;
        -r | --restart)
            start=true
            forceRecreate="--force-recreate"
            ;;
        -b | --build)
            build=true
            ;;
        -s | --start)
            start=true
            ;;
        --stop)
            stop=true
            ;;
        -un | --update-node)
            UPDATE_NODE=true
            ;;
        -us | --update-service)
            UPDATE_SERVICE=true
            ;;
        -uc | --update-ans)
            UPDATE_ANS=true
            ;;
        --project-name=*)
            PROJECT_NAME=$(echo "$arg" | sed 's/--project-name=//g')
            ;;
        -au | --auto-update)
            autoUpdate=true
            ;;
        -au=* | --auto-update=*)
            autoUpdate=true
            SPECIFIC_USER=$(echo "$arg" | sed 's/-au=//g')
            SPECIFIC_USER=$(echo "$SPECIFIC_USER" | sed 's/--auto-update=//g')
            ;;
        -aul=* | --auto-update-level=*)
            autoUpdate=true
            autoUpdateLevel=$(echo "$arg" | sed 's/-aul=//g')
            autoUpdateLevel=$(echo "$autoUpdateLevel" | sed 's/--auto-update-level=//g')
            ;;
        -dau | --disable-auto-update)
            disableAutoUpdate=true
            ;;
        -rfp | --restore-file-permissions)
            restoreFilePermissions=true
            ;;
        -rnfp | --restore-node-file-permissions)
            restoreNodeFilePermissions=true
            ;;
        -gd | --grant-docker)
            grantDocker=true
            ;;
        -gd=* | --grant-docker=*)
            grantDocker=true
            SPECIFIC_USER=$(echo "$arg" | sed 's/-gd=//g')
            SPECIFIC_USER=$(echo "$SPECIFIC_USER" | sed 's/--grant-docker=//g')
            ;;
        -nc | --no-cache)
            noCache="--no-cache"
            ;;
        -i | --node-info)
            info=true
            ;;
        --user=*)
            user=true
            grantDocker=true
            SPECIFIC_USER=$(echo "$arg" | sed 's/--user=//g')
            ;;
        --passed)
            passed=true
            ;;
        -se=* | --set-env=*)
            setEnv=true
            ;;
        -sp=* | --set-parameter=*)
            setParams=true
            ;;
        -es=* | --external-source=*)
            NODE_SOURCE=$(echo "$arg" | sed 's/-es=//g')
            NODE_SOURCE=$(echo "$NODE_SOURCE" | sed 's/--external-source=//g')
            ;;
        --bind=*)
            bind=true
            ;;
        --ans-branch=*)
            ANS_BRANCH=$(echo "$arg" | sed 's/--ans-branch=//g')
            ;;
        --node-branch=*)
            NODE_BRANCH=$(echo "$arg" | sed 's/--node-branch=//g')
            ;;
        --prune)
            PRUNE="full"
            stop=true
            ;;
        --prune-data)
            PRUNE=${PRUNE:-"data"}
            stop=true
            ;;
        --dev)
            DEV=true
            ;;
        --docker-prune)
            dockerPrune=true
            ;;
        -?*)
            echo "Invalid parameter was provided: $arg"
            exit 2
            ;;
        *)
            warn "Missing hyphen - ignoring '$arg'"
            ;;
        esac
    done
}
parse_params "$@"

# prune docker, if requested
if [ "$dockerPrune" = "true" ]; then
    docker system prune
fi

update_current_user
USER=${SPECIFIC_USER:-"$USER"}

if [ "$user" = "true" ]; then
    if create_user "$USER"; then
        success "$USER successfully created."
    else
        error "Failed to create $USER"
        exit 4
    fi
fi

# save node source, if we got new one
if [ -n "$NODE_SOURCE" ]; then
    set_json_file_value "$BASEDIR/state/conf.json" "node_source" "$NODE_SOURCE"
fi
# install dependencies
if [ "$full" = "true" ] || [ "$dependencies" = "true" ]; then
    install_dependencies
fi

# connect ANS repository in case it was downloaded as zip
git --git-dir="$BASEDIR/.git" --work-tree="$BASEDIR" remote get-url origin >/dev/null 2>&1 ||
    git --git-dir="$BASEDIR/.git" --work-tree="$BASEDIR" config remote.origin.url >/dev/null 2>&1 ||
    init_repository "$BASEDIR" "https://github.com/cryon-io/ans.git"

### Project
OLD_PROJECT_NAME=$(get_json_file_value "$BASEDIR/state/conf.json" "project_name")
# update node type
if ! get_node_type; then
    OLD_PROJECT_NAME=${OLD_PROJECT_NAME:-$OLD_NODE}
    stop_node "$BASEDIR/containers/$OLD_NODE/docker-compose.yml" "$BASEDIR/is-up" "$OLD_PROJECT_NAME" "$OLD_NODE"
fi

if [ -z "$DEV" ]; then
    DEV=$(get_json_file_value "$BASEDIR/state/conf.json" "DEV")
else
    set_json_file_value "$BASEDIR/state/conf.json" "DEV" "$DEV"
fi

# get project_name or save if we got new one
if [ -z "$PROJECT_NAME" ]; then
    PROJECT_NAME=${OLD_PROJECT_NAME:-$NODE}
else
    set_json_file_value "$BASEDIR/state/conf.json" "project_name" "$PROJECT_NAME"
fi

# stop running node
if [ -n "$NODE" ] && [ "$stop" = "true" ]; then
    stop_node "$BASEDIR/containers/$NODE/docker-compose.yml" "$BASEDIR/is-up" "$PROJECT_NAME" "$NODE"
fi

# prune ans environment
case $PRUNE in
"data")
    require_root_privileges
    if ! rm -r "$BASEDIR/containers/$NODE/data/"*; then
        error "Failed prune node data. Please retry..."
        exit 17
    fi
    ;;
"full")
    require_root_privileges
    if ! rm -r "$BASEDIR/containers/"*; then
        error "Failed prune containers. Please retry..."
        exit 16
    fi
    ;;
esac

# get node source and check, if node type supported
NODE_SOURCE=$(get_node_type_source "$NODE")
if [ -z "$NODE_SOURCE" ]; then
    error "Not supported node type: $NODE"
    exit 7
fi

# load ans branch
if [ -n "$ANS_BRANCH" ]; then
    require_root_privileges
    repository_branch_switch "$BASEDIR" "$ANS_BRANCH"
    set_json_file_value "$BASEDIR/state/conf.json" "ans_branch" "$ANS_BRANCH"
    restoreFilePermissions=true
elif [ -z "$ANS_BRANCH" ] && [ -f "$BASEDIR/state/conf.json" ]; then
    ANS_BRANCH=$(get_json_file_value "$BASEDIR/state/conf.json" "ans_branch")
    ANS_BRANCH=${JSON_VALUE:-master}
fi

# load node branch
if [ -n "$NODE_BRANCH" ]; then
    require_root_privileges
    set_json_file_value "$BASEDIR/state/conf.json" "node_branch" "$NODE_BRANCH"
    repository_branch_switch "$BASEDIR/containers/$NODE" "$NODE_BRANCH"
    restoreFilePermissions=true
elif [ -z "$ANS_BRANCH" ] && [ -f "$BASEDIR/state/conf.json" ]; then
    NODE_BRANCH=$(get_json_file_value "$BASEDIR/state/conf.json" "node_branch")
    NODE_BRANCH=${NODE_BRANCH:-master}
fi

# update ans
if [ "$full" = "true" ] || [ "$UPDATE_ANS" = "true" ]; then
    update_ans
    if [ "$?" = "1" ]; then
        restoreFilePermissions=true
    fi
fi

# Clone service repository if not yet cloned
if ! git --git-dir="$BASEDIR/containers/$NODE/.git" rev-parse --git-dir >/dev/null 2>&1; then
    info "Cloning repository: $NODE_SOURCE"
    clone_repository "$NODE_SOURCE" "$BASEDIR/containers/$NODE"
    repository_branch_switch "$BASEDIR/containers/$NODE" "$NODE_BRANCH"
else
    # always reset repository, if not cloned ... ensures deterministic (except if dev is set... for dev purpose only)
    if [ ! "$DEV" = "true" ]; then
        reset_repository "$BASEDIR/containers/$NODE"
    fi
    restoreNodeFilePermissions=true
    silentRestoreNodeFilePermissions=true
fi

# update service
if [ "$full" = "true" ] || [ "$UPDATE_SERVICE" = "true" ]; then
    update_service
    if [ "$?" = "1" ]; then
        restoreFilePermissions=true
        build=true
        start=true
        noCache="--no-cache"
    fi
fi

# ensure that we use proper version of ans for node management
DEF_FILE="$BASEDIR/containers/$NODE/def.json"
if [ ! -f "$DEF_FILE" ]; then
    error "Cannot find $NODE definition file: $DEF_FILE"
    exit 19
fi

NEEDED_VER=$(get_json_file_value "$BASEDIR/containers/$NODE/def.json" "required-ans-version")
NEEDED_VER=${NEEDED_VER:-0}
require_ans_version "$NEEDED_VER"

if [ ! "$passed" = "true" ]; then
    save_node_type
fi

# set fs permissions
if [ "$full" = "true" ] || [ "$restoreFilePermissions" = "true" ]; then
    require_root_privileges
    create_group "ans"
    REAL_USER=$(who am i | awk '{print $1}')
    add_user_to_group "$USER" "ans"
    add_user_to_group "$REAL_USER" "ans"
    chgrp -R "ans" "$BASEDIR"
    chmod -R g+rw "$BASEDIR"
    chmod g+x "$PATH_TO_ANS"
    chmod +x "$PATH_TO_ANS" "$BASEDIR/cli" "$BASEDIR/is-up"
fi

if [ "$full" = "true" ] || [ "$restoreFilePermissions" = "true" ] || [ "$restoreNodeFilePermissions" = "true" ]; then

    script_sub_path=$(get_json_file_value "$DEF_FILE" "fs-permissions")
    if [ -f "$BASEDIR/containers/$NODE/$script_sub_path" ]; then
        if [ "$silentRestoreNodeFilePermissions" = "true" ]; then
            sh "$BASEDIR/containers/$NODE/$script_sub_path" >/dev/null
        else
            sh "$BASEDIR/containers/$NODE/$script_sub_path"
        fi
    fi
fi

# set env variables

script_sub_path=$(get_json_file_value "$DEF_FILE" "set-env")
ENV_SETTER="$BASEDIR/containers/$NODE/$script_sub_path"
if [ "$setEnv" = "true" ]; then
    rm -f "$BASEDIR/state/environment"
    for arg in "$@"; do
        case $arg in
        -se=* | --set-env=*)
            ENV=$(echo "$arg" | sed 's/-se=//')
            ENV=$(echo "$ENV" | sed 's/--set-env=//')
            info "Configuring env variable '$ENV'"
            if [ -f "$ENV_SETTER" ]; then
                sh "$ENV_SETTER" "$ENV"
            fi
            echo "$ENV" >>"$BASEDIR/state/environment"
            ;;
        esac
    done
elif [ -f "$BASEDIR/state/environment" ] && [ ! "$passed" = "true" ]; then
    while IFS= read -r line; do
        if [ -n "$line" ]; then
            # info "Reapplying env variable '$line'"
            if [ -f "$ENV_SETTER" ]; then
                sh "$ENV_SETTER" "$line"
            fi
        fi
    done <"$BASEDIR/state/environment"
fi

script_sub_path=$(get_json_file_value "$DEF_FILE" "set-param")
PARAM_SETTER="$BASEDIR/containers/$NODE/$script_sub_path"

# set project name
if [ -n "$PROJECT_NAME" ] && [ -f "$PARAM_SETTER" ]; then
    sh "$PARAM_SETTER" "PROJECT=$PROJECT_NAME"
fi

# set params
if [ "$setParams" = "true" ]; then
    rm -f "$BASEDIR/state/parameters"
    for arg in "$@"; do
        case $arg in
        -sp=* | --set-parameter=*)
            PARAM=$(echo "$arg" | sed 's/-sp=//')
            PARAM=$(echo "$PARAM" | sed 's/--set-parameter=//')
            info "Setting parameter '$PARAM'"
            if [ -f "$PARAM_SETTER" ]; then
                sh "$PARAM_SETTER" "$PARAM"
            fi
            echo "$PARAM" >>"$BASEDIR/state/parameters"
            ;;
        esac
    done
elif [ -f "$BASEDIR/state/parameters" ] && [ ! "$passed" = "true" ]; then
    while IFS= read -r line; do
        if [ -n "$line" ]; then
            # info "Reapplying parameter '$line'"
            if [ -f "$PARAM_SETTER" ]; then
                sh "$PARAM_SETTER" "$line"
            fi
        fi
    done <"$BASEDIR/state/parameters"
fi

# set binds
if [ "$bind" = "true" ]; then
    rm -f "$BASEDIR/state/binds"
    for arg in "$@"; do
        case $arg in
        --bind=*)
            BIND=$(echo "$arg" | sed 's/--bind=//g')
            info "Setting binding '$BIND'"
            BIND_PORT=$(echo "$BIND" | sed 's/.*://g')
            NEW_COMPOSE=$(sed "s/- \".*:$BIND_PORT\/udp\"/- \"$BIND\/udp\"/g" "$BASEDIR/containers/$NODE/docker-compose.yml")
            NEW_COMPOSE=$(printf "%s" "$NEW_COMPOSE" | sed "s/- \".*:$BIND_PORT\"/- \"$BIND\"/g")
            echo "$NEW_COMPOSE" >"$BASEDIR/containers/$NODE/docker-compose.yml"
            echo "$BIND" >>"$BASEDIR/state/binds"
            ;;
        esac
    done
elif [ -f "$BASEDIR/state/binds" ] && [ ! "$passed" = "true" ]; then
    while IFS= read -r line; do
        if [ -n "$line" ]; then
            # info "Reapplying binding '$line'"
            BIND_PORT=$(echo "$line" | sed 's/.*://g')
            NEW_COMPOSE=$(sed "s/- \".*:$BIND_PORT\/udp\"/- \"$line\/udp\"/g" "$BASEDIR/containers/$NODE/docker-compose.yml")
            NEW_COMPOSE=$(printf "%s" "$NEW_COMPOSE" | sed "s/- \".*:$BIND_PORT\"/- \"$line\"/g")
            echo "$NEW_COMPOSE" >"$BASEDIR/containers/$NODE/docker-compose.yml"
        fi
    done <"$BASEDIR/state/binds"
fi

# grant docker permissions
if [ "$full" = "true" ] || [ "$grantDocker" = "true" ]; then
    if [ "$(groups "$USER" | grep "docker" || echo "true")" = "true" ] && [ "$(groups "$USER" | grep "root" || echo "true")" = "true" ]; then
        require_root_privileges
        usermod -a -G docker "$USER"
        if [ "$(groups "$USER" | grep "docker" || echo "true")" = "true" ] && [ "$(groups "$USER" | grep "root" || echo "true")" = "true" ]; then
            error "Failed to set docker privileges for user $USER"
        else
            success "Docker privileges granted to $USER"
        fi
    else
        success "Docker privileges are already granted to $USER"
    fi
fi

serviceDef="$BASEDIR/containers/$NODE/docker-compose.yml"
# build service
if [ "$full" = "true" ] || [ "$build" = "true" ]; then
    if [ "$user" = "true" ]; then
        if ! runuser -l "$USER" -c "sh $PATH_TO_ANS -b --passed -nc"; then
            error "Failed to build service for $NODE"
            exit 13
        fi
    else
        require_docker_privileges
        if [ ! -f "$serviceDef" ]; then
            error "Cannot find $NODE compose file: $serviceDef"
            exit 8
        fi

        if ! build_service "$BASEDIR/containers/$NODE/docker-compose.yml" "$noCache" "$PROJECT_NAME"; then
            error "Failed to build service for $NODE"
            exit 13
        fi
    fi
fi

# run before-start script
if [ "$full" = "true" ] || [ "$start" = "true" ]; then
    if [ ! "$user" = "true" ]; then
        script_sub_path=$(get_json_file_value "$DEF_FILE" "before-start")
        BEFORE_START_SCRIPT="$BASEDIR/containers/$NODE/$script_sub_path"
        if [ -f "$BEFORE_START_SCRIPT" ]; then
            info "Running before-start init script"

            if sh "$BEFORE_START_SCRIPT"; then
                info "before-start initialization successful"
            else
                error "Failed to finish before-start initialization"
                exit 12
            fi
        fi
    fi
fi

# start service
if [ "$full" = "true" ] || [ "$start" = "true" ]; then
    if [ "$user" = "true" ]; then
        runuser -l "$USER" -c "sh $PATH_TO_ANS -s --passed"
    else
        require_docker_privileges
        if [ ! -f "$serviceDef" ]; then
            error "Cannot find $NODE compose file: $serviceDef"
            exit 8
        fi

        start_service "$serviceDef" "$forceRecreate" "$PROJECT_NAME"
        echo "waiting (15s) for MN to start..."
        sleep 15

        if ! sh "$BASEDIR/is-up"; then
            error "Failed to start node. Exiting..."
            exit 5
        fi
    fi
fi

# run on-start script
if [ "$full" = "true" ] || [ "$start" = "true" ]; then
    if [ ! "$user" = "true" ]; then
        script_sub_path=$(get_json_file_value "$DEF_FILE" "on-start")
        ON_START_SCRIPT="$BASEDIR/containers/$NODE/$script_sub_path"

        if [ -f "$ON_START_SCRIPT" ]; then
            info "Running on-start init script"
            sh "$ON_START_SCRIPT"
        fi
    fi
fi

# update node binaries through docker build
if [ "$UPDATE_NODE" = "true" ]; then
    update_node
fi

# configure auto update
if [ "$full" = "true" ] || [ "$autoUpdate" = "true" ]; then
    if [ ! "$disableAutoUpdate" = "true" ]; then
        require_root_privileges
        crontab -u "root" -l | grep -v "sh \"$PATH_TO_ANS\" --update-node" >"temp.cron"

        update_option="--update-node --update-service"
        if [ -n "$autoUpdateLevel" ]; then
            case "$autoUpdateLevel" in
            "0" | "node")
                update_option="--update-node"
                ;;
            "1" | "service")
                update_option="--update-node --update-service"
                ;;
            "2" | "all")
                update_option="--update-node --update-service --update-ans"
                ;;
            *)
                warn "Unknown auto update level: $autoUpdateLevel"
                warn "Using default auto update level (0 - node)."
                ;;
            esac
        fi
        echo "59 23 * * * sh \"$PATH_TO_ANS\" $update_option > /var/log/ans-update.log" >>"temp.cron"
        crontab -u "root" "temp.cron"
        rm "temp.cron"
        # shellcheck disable=SC2015
        crontab -u "root" -l | grep "\"$PATH_TO_ANS\" $update_option" >/dev/null && success "Auto update configured." || error "Failed to configure auto update."
    fi
fi

# disable auto update
if [ "$disableAutoUpdate" = "true" ]; then
    require_root_privileges
    crontab -u "root" -l | grep -v "$PATH_TO_ANS" | crontab -u "root" -
    # shellcheck disable=SC2015
    crontab -u "root" -l | grep "$PATH_TO_ANS" && error "Failed to disable auto update." || success "Auto updated disabled"
fi

# display information about node
if [ "$full" = "true" ] || [ "$info" = "true" ]; then
    info "NODE DETAILS:"
    script_sub_path=$(get_json_file_value "$DEF_FILE" "node-info")
    INFO_FROM_NODE=$(sh "$BASEDIR/containers/$NODE/$script_sub_path")
    TEMPLATE_VERSION=$(get_json_file_value "$DEF_FILE" "version")
    ANS_VERSION=$(get_json_file_value "$BASEDIR/version.json" "ans")

    printf "%s
TEMPLATE VERSION: %s
ANS VERSION: %s\n" "$INFO_FROM_NODE" "$TEMPLATE_VERSION" "$ANS_VERSION" >"$BASEDIR/node.info"
    printf "%s
TEMPLATE VERSION: %s
ANS VERSION: %s\n" "$INFO_FROM_NODE" "$TEMPLATE_VERSION" "$ANS_VERSION"
    info "** this node info was also saved into $BASEDIR/node.info **"
fi
